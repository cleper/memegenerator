{"version":3,"sources":["assets/images/memebackground.svg","assets/fonts/fjalloneregular.ttf","components/reset/index.js","helpers/devices/index.js","components/landingView/styles.js","components/landingView/components/memeGenerator/styles.js","components/landingView/components/memeGenerator/components/Meniu/styles.js","helpers/handleInputs.js","components/landingView/components/memeGenerator/components/Meniu/index.js","components/landingView/components/memeGenerator/components/imageEditor/styles.js","components/landingView/components/memeGenerator/components/imageEditor/index.js","components/landingView/components/memeGenerator/index.js","helpers/validations.js","components/landingView/components/memeSelection/styles.js","components/landingView/components/memeSelection/index.js","components/landingView/index.js","components/cssvariables/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Reset","createGlobalStyle","size","device","mobileS","mobileM","mobileL","tablet","laptop","laptopL","standard","desktop","desktopL","LandingViewContainer","styled","main","LandingViewHeader","header","MemeSelectionContainer","div","show","MemeGeneratorContainer","bouncing","keyframes","MeniuContainer","form","DefaultButton","button","props","animate","DefaultInput","input","ErrorMessage","span","error","getName","index","getData","inputs","id","username","password","boxes","forEach","data","template_id","Object","entries","reduce","initialValue","key","value","encodeURIComponent","Meniu","showMemeSelectionClicked","generateMeme","meme","memeSet","length","useState","firstBoxText","setFirstBoxText","secondBoxText","setSecondBoxText","thirdBoxText","setThirdBoxText","fourthBoxText","setFourthBoxText","fields","FIRSTBOXTEXT","setter","SECONDBOXTEXT","THIRDBOXTEXT","FOURTHBOXTEXT","FIFTHBOXTEXT","i","name","onChange","inputChangeHandler","placeholder","toUpperCase","push","e","target","onSubmit","type","onClick","ImageEditorContainer","width","imageBackground","SelectedImage","img","ImageEditor","window","innerWidth","document","documentElement","clientWidth","body","setWidth","useEffect","handleResize","addEventListener","removeEventListener","src","url","alt","POST_MEMES_API","MemeGenerator","currentMeme","setCurrentMeme","setError","preventDefault","elements","filter","element","tagName","map","trim","validateInputs","fetch","method","headers","process","then","response","json","res","success","MemeList","display","Meme","MemeSelection","memes","setMeme","loadingContainer","loading","setLoading","setDisplay","handleLoad","newArray","slice","onLoad","bind","GET_MEMES_API","LandingView","showMemeSelection","setShowMemeSelection","setMemes","CssVariables","fjalloneregular","App","Fragment","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.27611117.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/memebackground.7f1e5c9a.svg\";","module.exports = __webpack_public_path__ + \"static/media/fjalloneregular.c112622e.ttf\";","import { createGlobalStyle } from 'styled-components';\r\n\r\nconst Reset = createGlobalStyle `\r\n    /* http://meyerweb.com/eric/tools/css/reset/ \r\n   v2.0 | 20110126\r\n   License: none (public domain)\r\n    */\r\n\r\n    html, body, div, span, applet, object, iframe,\r\n    h1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\n    a, abbr, acronym, address, big, cite, code,\r\n    del, dfn, em, img, ins, kbd, q, s, samp,\r\n    small, strike, strong, sub, sup, tt, var,\r\n    b, u, i, center,\r\n    dl, dt, dd, ol, ul, li,\r\n    fieldset, form, label, legend,\r\n    table, caption, tbody, tfoot, thead, tr, th, td,\r\n    article, aside, canvas, details, embed, \r\n    figure, figcaption, footer, header, hgroup, \r\n    menu, nav, output, ruby, section, summary,\r\n    time, mark, audio, video {\r\n        margin: 0;\r\n        padding: 0;\r\n        border: 0;\r\n        font-size: 100%;\r\n        font: inherit;\r\n        vertical-align: baseline;\r\n    }\r\n    /* HTML5 display-role reset for older browsers */\r\n    article, aside, details, figcaption, figure, \r\n    footer, header, hgroup, menu, nav, section {\r\n        display: block;\r\n    }\r\n    body {\r\n        line-height: 1;\r\n        overflow-x: hidden;\r\n    }\r\n    ol, ul {\r\n        list-style: none;\r\n    }\r\n    blockquote, q {\r\n        quotes: none;\r\n    }\r\n    blockquote:before, blockquote:after,\r\n    q:before, q:after {\r\n        content: '';\r\n        content: none;\r\n    }\r\n    table {\r\n        border-collapse: collapse;\r\n        border-spacing: 0;\r\n    }\r\n`;\r\n\r\nexport default Reset;","//Define media queries\r\nconst size = {\r\n  mobileS: '320px',\r\n  mobileM: '375px',\r\n  mobileL: '425px',\r\n  tablet: '768px',\r\n  laptop: '1024px',\r\n  laptopL: '1440px',\r\n  standard: '1920px',\r\n  desktop: '2560px'\r\n};\r\n\r\nconst device = {\r\n  mobileS: `(min-width: ${size.mobileS})`,\r\n  mobileM: `(min-width: ${size.mobileM})`,\r\n  mobileL: `(min-width: ${size.mobileL})`,\r\n  tablet: `(min-width: ${size.tablet})`,\r\n  laptop: `(min-width: ${size.laptop})`,\r\n  laptopL: `(min-width: ${size.laptopL})`,\r\n  standard: `(min-width: ${size.standard})`,\r\n  desktop: `(min-width: ${size.desktop})`,\r\n  desktopL: `(min-width: ${size.desktop})`\r\n};\r\n\r\nexport default device;","import styled from 'styled-components';\r\nimport device from '../../helpers/devices/index';\r\n\r\nexport const LandingViewContainer = styled.main `\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background: rgb(58, 58, 58);\r\n    min-height: 100vh;\r\n    min-width: 100vw;\r\n    padding: 30px 0;\r\n    box-sizing: border-box;\r\n\r\n    @media${device.standard}{\r\n        width: 100vw;\r\n        height: 100vh;\r\n        overflow: hidden;\r\n    }\r\n`;\r\n\r\nexport const LandingViewHeader = styled.header `\r\n    color: rgb(250, 252, 253);\r\n    font-family: var(--defaultFontFamily);\r\n    margin-bottom: 10vh;\r\n    font-size: 1.3rem;\r\n    text-align: justify;\r\n    padding: 0 5px;\r\n\r\n    @media${device.tablet}{\r\n        font-size: 2rem;\r\n    }\r\n\r\n    @media${device.standard}{\r\n        font-size: 3rem;\r\n    }\r\n\r\n    @media${device.desktopL}{\r\n        font-size: 10rem;\r\n    }\r\n`;\r\n\r\nexport const MemeSelectionContainer = styled.div `\r\n    will-change: transform;\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    top: 0;\r\n    left: 0;\r\n    transition: transform 3s ease-out;\r\n    transform: translateZ(0);\r\n    background-color: rgb(250, 250, 250);\r\n    z-index: 2;\r\n    transform: translateZ(0) translateX(${({show}) => show === true ? \"0\" : \"-100%\"});\r\n    overflow: scroll;\r\n\r\n    @media${device.tablet}{\r\n        width: 70%;\r\n    }\r\n`;\r\n\r\n\r\n","import styled from 'styled-components';\r\nimport device from '../../../../helpers/devices/index';\r\n\r\nexport const MemeGeneratorContainer = styled.div `\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n\r\n    @media${device.tablet}{\r\n        flex-direction: row;\r\n        justify-content: flex-end;\r\n    }\r\n\r\n`;","import styled, { keyframes } from 'styled-components';\r\nimport device from '../../../../../../helpers/devices/index';\r\n\r\nconst bouncing = keyframes `\r\n    5%{\r\n        transform: rotate(-5deg);\r\n    }\r\n    10%{\r\n        transform: rotate(5deg);\r\n    }\r\n    15%{\r\n        transform: rotate(-5deg);\r\n    }\r\n    20%{\r\n        transform: rotate(4deg);\r\n    }\r\n    25%{\r\n        tranform: rotate(-3deg)\r\n    }\r\n    30%{\r\n        transform: rotate(0deg);\r\n    }\r\n    100%{\r\n        transform: rotate(0deg);\r\n    }\r\n`;\r\n\r\nexport const MeniuContainer = styled.form `\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 100%;\r\n\r\n    @media${device.tablet}{\r\n        width: 30%;\r\n    }\r\n\r\n    @media${device.laptopL}{\r\n        width: 25%;\r\n    }\r\n\r\n    @media${device.desktopL}{\r\n        width: 30%;\r\n    }\r\n`;\r\n\r\nexport const DefaultButton = styled.button `\r\n    font-family: var(--defaultFontFamily);\r\n    font-size: 1.5rem;\r\n    color: rgb(250, 252, 253);\r\n    padding: 10px 20px;\r\n    border-radius: 10px;\r\n    border:none;\r\n    background-color: #DC3D24;\r\n    animation: ${props => props.animate && bouncing} 6s linear infinite;\r\n    margin-bottom: 15px;\r\n\r\n    @media${device.desktopL}{\r\n        font-size: 3rem;\r\n        padding: 20px 40px;\r\n        margin-bottom: 30px;\r\n    }\r\n\r\n    &:hover{\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nexport const DefaultInput = styled.input `\r\n    font-family: var(--defaultFontFamily);\r\n    margin: 15px 0;\r\n    padding: 10px;\r\n\r\n    @media${device.laptopL}{\r\n        font-size: 1.5rem;\r\n    }\r\n\r\n    @media${device.desktopL}{\r\n        margin: 30px 0;\r\n        padding: 20px;\r\n        font-size: 3rem;\r\n    }\r\n`;\r\n\r\nexport const ErrorMessage = styled.span `\r\n    font-family: var(--defaultFontFamily);\r\n    color: red;\r\n    margin-bottom: 15px;\r\n    visibility: ${props => props.error ? \"initial\" : \"hidden\"};\r\n\r\n    @media${device.desktopL}{\r\n        margin-bottom: 30px;\r\n        font-size: 2rem;\r\n    }\r\n`;\r\n\r\n\r\n","export function getName(index){\r\n    switch(index){\r\n        case 0:\r\n            return \"firstBoxText\";\r\n        case 1:\r\n            return \"secondBoxText\";\r\n        case 2:\r\n            return \"thirdBoxText\";\r\n        case 3:\r\n            return \"fourthBoxText\";\r\n        case 4:\r\n            return \"fifthBoxText\";\r\n        default:\r\n            return \"\"\r\n    }\r\n}\r\n\r\nexport function getData(inputs, id, username, password){\r\n    const boxes = {};\r\n    //Adds properties with specific name, depending on index of input\r\n    inputs.forEach((input, index) => {\r\n        boxes[`boxes[${index}][text]]`] = input\r\n    });\r\n\r\n    const data = {\r\n        template_id: id,\r\n        username,\r\n        password,\r\n        ...boxes\r\n    };\r\n\r\n    //imgflip api does not accept json body so url is being used\r\n    return Object.entries(data).reduce((initialValue, [key, value]) => (\r\n            initialValue + encodeURIComponent(key) + \"=\" + encodeURIComponent(value) + \"&\"\r\n    ), \"\");\r\n}\r\n","import React, { useState } from 'react';\r\nimport {\r\n    MeniuContainer,\r\n    DefaultButton,\r\n    DefaultInput,\r\n    ErrorMessage\r\n} from './styles';\r\nimport PropTypes from 'prop-types';\r\nimport { getName } from '../../../../../../helpers/handleInputs';\r\n\r\nconst Meniu = ({showMemeSelectionClicked, generateMeme, meme, error}) => {\r\n    const memeSet = Object.entries(meme).length > 0;\r\n    const {\"box_count\" : boxes} = meme;\r\n    //Define 5 boxes states for maximum of inputs availible for one meme defined in api\r\n    const [firstBoxText, setFirstBoxText] = useState(\"\");\r\n    const [secondBoxText, setSecondBoxText] = useState(\"\");\r\n    const [thirdBoxText, setThirdBoxText] = useState(\"\");\r\n    const [fourthBoxText, setFourthBoxText] = useState(\"\");\r\n    const [fifthBoxText, setFifthBoxText] = useState(\"\");\r\n\r\n    const fields = {\r\n        FIRSTBOXTEXT: {\r\n            value: firstBoxText,\r\n            setter: setFirstBoxText\r\n        },\r\n        SECONDBOXTEXT: {\r\n            value: secondBoxText,\r\n            setter: setSecondBoxText\r\n        },\r\n        THIRDBOXTEXT: {\r\n            value: thirdBoxText,\r\n            setter: setThirdBoxText\r\n        },\r\n        FOURTHBOXTEXT: {\r\n            value: fourthBoxText,\r\n            setter: setFourthBoxText\r\n        },\r\n        FIFTHBOXTEXT: {\r\n            value: fifthBoxText,\r\n            setter: setFifthBoxText\r\n        }\r\n    };\r\n\r\n    let inputs = [];\r\n\r\n    if(boxes){\r\n        for(let i = 0; i < boxes; i++){\r\n            const name = getName(i);\r\n            let input = <DefaultInput key={i} onChange={inputChangeHandler} name={name} placeholder={`Enter ${i + 1} box text`}\r\n            value={fields[name.toUpperCase()].value}/>;\r\n            inputs.push(input);\r\n        }\r\n    }\r\n\r\n    function inputChangeHandler(e){\r\n        fields[e.target.name.toUpperCase()].setter(e.target.value)\r\n    }\r\n\r\n    return(\r\n        <MeniuContainer onSubmit={generateMeme}>\r\n            <DefaultButton animate={!memeSet && true} type=\"button\" onClick={showMemeSelectionClicked}> Select meme </DefaultButton>\r\n            {inputs}\r\n            <ErrorMessage error={error ? 1 : 0}>{error}</ErrorMessage>\r\n            <DefaultButton animate={memeSet && true} type=\"submit\"> Generate meme</DefaultButton>\r\n        </MeniuContainer>\r\n    );\r\n};\r\n\r\nexport default Meniu;\r\n\r\nMeniu.propTypes = {\r\n    showMemeSelectionClicked: PropTypes.func.isRequired,\r\n    generateMeme: PropTypes.func.isRequired,\r\n    meme: PropTypes.object.isRequired,\r\n    error: PropTypes.string.isRequired\r\n}","import styled from 'styled-components';\r\nimport imageBackground from '../../../../../../assets/images/memebackground.svg';\r\nimport device from '../../../../../../helpers/devices/index';\r\n\r\nexport const ImageEditorContainer = styled.div `\r\n    display: flex;\r\n    width: 100%;\r\n    height: ${({width}) => width * 629 / 960}px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background-color: transparent;\r\n    border-radius: 10px;\r\n    background-image: url(${imageBackground});\r\n    background-repeat: no-repeat;\r\n    background-size: contain;\r\n    background-position: center;\r\n    margin-bottom: 15px;\r\n\r\n    @media${device.tablet}{\r\n        width: 70%;\r\n        height: ${({width}) => width * 0.7 * 629 / 960}px;\r\n    }\r\n\r\n    @media${device.laptopL}{\r\n        width: 50%;\r\n        height: ${({width}) => width * 0.5 * 629 / 960}px;\r\n        margin: 0;\r\n    }\r\n\r\n    @media${device.desktopL}{\r\n        width: 40%;\r\n        height: ${({width}) => width * 0.4 * 629 / 960}px;\r\n    }\r\n`;\r\n\r\nexport const SelectedImage = styled.img `\r\n    max-width: 80%;\r\n    max-height: 70%;\r\n\r\n`\r\n\r\nexport const Cut = styled.div `\r\n    position: absolute;\r\n    height: calc(var(--cutSize) / 2);\r\n    width: var(--cutSize);\r\n    border-top-left-radius: var(--cutSize);\r\n    border-top-right-radius: var(--cutSize);\r\n    background-color: #3A3A3A;\r\n    left: -34px;\r\n    transform: rotate(135deg);\r\n`;","import React, {useState, useEffect} from 'react';\r\nimport {\r\n    ImageEditorContainer,\r\n    SelectedImage,\r\n} from './styles';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ImageEditor = ({meme}) => {\r\n    const [width, setWidth] = useState(window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth);\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n          setWidth(window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth);\r\n        };\r\n                \r\n        window.addEventListener('resize', handleResize)\r\n    \r\n        return function cleanup() {\r\n            window.removeEventListener('resize', handleResize);\r\n        }\r\n    })\r\n    return(\r\n        <ImageEditorContainer width={width}>\r\n            <SelectedImage src={meme.url} alt={meme.name}/>\r\n        </ImageEditorContainer>\r\n    );\r\n};\r\n\r\nexport default ImageEditor;\r\n\r\nImageEditor.propTypes = {\r\n    meme: PropTypes.object.isRequired\r\n}","import React, { useState } from 'react';\r\nimport {\r\n    MemeGeneratorContainer\r\n} from './styles';\r\nimport Meniu from './components/Meniu/index';\r\nimport ImageEditor from './components/imageEditor/index';\r\nimport PropTypes from 'prop-types';\r\nimport { validateInputs } from '../../../../helpers/validations';\r\nimport { getData } from '../../../../helpers/handleInputs';\r\n\r\nconst POST_MEMES_API = \"https://api.imgflip.com/caption_image\";\r\n\r\nconst MemeGenerator = ({showMemeSelectionClicked, currentMeme, setCurrentMeme}) => {\r\n\r\n    const [error, setError] = useState(\"\");\r\n\r\n    function generateMeme(e){\r\n        e.preventDefault();\r\n        const inputs = [...e.target.elements].filter(element => element.tagName === \"INPUT\").map(input => input.value);\r\n        if(validateInputs(inputs))\r\n        {   \r\n            fetch(POST_MEMES_API, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/x-www-form-urlencoded',\r\n                  },\r\n                body: getData(inputs, currentMeme.id, process.env.REACT_APP_IMGFLIP_USERNAME, process.env.REACT_APP_IMGFLIP_PASSWORD),\r\n              })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                if(res.success){\r\n                    setError(\"\");\r\n                    setCurrentMeme({\r\n                        ...currentMeme,\r\n                        url: res.data.url\r\n                    })\r\n                }\r\n                else{\r\n                    setError(res[\"error_message\"])\r\n                }\r\n            });\r\n        }\r\n        else if(Object.entries(currentMeme).length > 0){\r\n            setError(\"All inputs must contain text!\")\r\n        }\r\n    }\r\n\r\n    return(\r\n        <MemeGeneratorContainer>\r\n            <ImageEditor meme={currentMeme}/>\r\n            <Meniu meme={currentMeme} showMemeSelectionClicked={showMemeSelectionClicked} generateMeme={generateMeme} error={error}/>\r\n        </MemeGeneratorContainer>\r\n    );\r\n};\r\n\r\nexport default MemeGenerator;\r\n\r\nMemeGenerator.propTypes = {\r\n    showMemeSelectionClicked: PropTypes.func.isRequired,\r\n    currentMeme: PropTypes.object.isRequired,\r\n    setCurrentMeme: PropTypes.func.isRequired\r\n}\r\n","export function validateInputs(inputs){\r\n    const validatedInputs = inputs.filter(input => input.trim() !== \"\")\r\n    return validatedInputs.length === inputs.length && inputs.length !== 0\r\n}","import styled from 'styled-components';\r\nimport device from '../../../../helpers/devices/index';\r\n\r\nexport const MemeList = styled.div `\r\n    display: ${props => props.display ? \"flex\": \"none\"};\r\n    flex-wrap: wrap;\r\n`\r\n\r\nexport const Meme = styled.img `\r\n    max-width: 80%;\r\n    max-height: 30vh;\r\n    padding: 10px;\r\n    box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.3);\r\n\r\n    &:hover{\r\n        cursor: pointer;\r\n    }\r\n\r\n    @media${device.tablet}{\r\n        max-width: 30%;\r\n        max-height: 30vh;\r\n    }\r\n`;","import React, { useState, useEffect } from 'react';\r\nimport { Meme, MemeList } from './styles';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst MemeSelection = ({memes, loadingContainer, setMeme}) => {\r\n    const [loading, setLoading] = useState(memes.map(meme => false));\r\n    const [display, setDisplay] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setLoading(memes.map(meme => true));\r\n    }, [memes]);\r\n\r\n    function handleLoad(index){\r\n        const newArray = loading.slice();\r\n        if(newArray[index] !== false){\r\n            newArray[index] = false;\r\n            setLoading(newArray);\r\n        }\r\n        if(newArray.filter(element => !element).length === loading.length){\r\n            setDisplay(true);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <MemeList display={display ? 1 : 0}>\r\n            {\r\n              memes.map((meme, index) => <Meme onLoad={handleLoad.bind(null, index)} onClick={setMeme.bind(null, meme)} key={meme.id} src={meme.url}/>)\r\n            }\r\n        </MemeList>\r\n    );\r\n}\r\n\r\nexport default MemeSelection;\r\n\r\nMemeSelection.propTypes = {\r\n    memes: PropTypes.array.isRequired\r\n}","import React, { useState } from 'react';\r\nimport {\r\n    LandingViewContainer,\r\n    LandingViewHeader,\r\n    MemeSelectionContainer\r\n} from './styles';\r\nimport MemeGenerator from './components/memeGenerator/index';\r\nimport MemeSelection from './components/memeSelection/index';\r\n\r\nconst GET_MEMES_API = \"https://api.imgflip.com/get_memes\";\r\n\r\nconst LandingView = () => {\r\n    const [showMemeSelection, setShowMemeSelection] = useState(false);\r\n    const [memes, setMemes] = useState([]);\r\n    const [currentMeme, setCurrentMeme] = useState({});\r\n\r\n    function showMemeSelectionClicked(){\r\n        if(!showMemeSelection){\r\n            getMemes()\r\n        }\r\n        setShowMemeSelection(!showMemeSelection);\r\n    }\r\n\r\n    function getMemes(){\r\n        if(memes.length === 0){\r\n            fetch(GET_MEMES_API)\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                setMemes(res.data.memes);\r\n            });\r\n        }\r\n    }\r\n\r\n    function setMeme(meme){\r\n        setCurrentMeme(meme);\r\n        setShowMemeSelection(false);\r\n    }\r\n\r\n    return(\r\n        <LandingViewContainer>\r\n            <LandingViewHeader> A meme generator using imgflip api </LandingViewHeader>\r\n            <MemeGenerator showMemeSelectionClicked={showMemeSelectionClicked} currentMeme={currentMeme} setCurrentMeme={setMeme}/>\r\n            <MemeSelectionContainer  show={showMemeSelection}>\r\n                <MemeSelection memes={memes.slice(0, 10)} setMeme={setMeme}/>\r\n            </MemeSelectionContainer>\r\n        </LandingViewContainer>\r\n    );\r\n}\r\n\r\nexport default LandingView;","import { createGlobalStyle } from 'styled-components';\r\nimport fjalloneregular from '../../assets/fonts/fjalloneregular.ttf';\r\n\r\nconst CssVariables = createGlobalStyle `\r\n\r\n    @font-face {\r\n        font-family: 'FjallOne-Regular';\r\n        font-style: normal;\r\n        src: font-url(${fjalloneregular}) format('truetype');\r\n    }\r\n\r\n    :root{\r\n        --cutSize: 80px;\r\n        --defaultFontFamily: 'FjallOne-Regular', 'Arial', 'sans-serif';\r\n    }\r\n\r\n`;\r\n\r\nexport default CssVariables;","import React from 'react';\nimport Reset from './components/reset/index';\nimport LandingView from './components/landingView/index';\nimport CssVariables from './components/cssvariables/index';\n\nfunction App() {\n  \n  return (\n    <React.Fragment>\n      <Reset/>\n      <CssVariables/>\n      <LandingView/>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}